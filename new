{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{ department.dept_name|upper }} - Dashboard</title>

  {% if department.dept_logo %}
  <link rel="icon" type="image/x-icon" href="{{ department.dept_logo.url }}" />
  {% endif %}

  <!-- Bootstrap, FontAwesome, Google Fonts, Leaflet -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<style>
  body {
    margin: 0;
    font-family: "Poppins", sans-serif;
    height: 100vh;
    overflow: hidden;
    {% if department.dept_dashboard_bg %}
    background: url('{{ department.dept_dashboard_bg.url }}') no-repeat center center fixed;
    background-size: cover;
    {% else %}
    background: linear-gradient(135deg, #d1f5fa 0%, #a3e4ed 100%);
    {% endif %}
    transition: background 0.3s ease;
  }

  .navbar {
    background: linear-gradient(to right, #3b1a6b, #4e268b);
    color: #fff;
    height: 70px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 2000;
  }

  .navbar-brand {
    display: flex;
    align-items: center;
    gap: 1.2rem;
    color: #fff;
    text-decoration: none;
    transition: transform 0.2s ease;
  }

  .navbar-brand:hover {
    transform: translateY(-2px);
  }

  .navbar-brand img {
    border-radius: 50%;
    border: 3px solid #ffffffcc;
    width: 56px;
    height: 56px;
    object-fit: cover;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  }

  .navbar-title {
    font-size: 1.4rem;
    font-weight: 700;
    letter-spacing: 0.5px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    font-size: 1.1rem;
    font-weight: 500;
    color: #f0f0f0;
    background: rgba(255, 255, 255, 0.1);
    padding: 8px 16px;
    border-radius: 20px;
    transition: background 0.2s ease;
  }

  .user-info:hover {
    background: rgba(255, 255, 255, 0.15);
  }

  .layout {
    display: flex;
    height: calc(100vh - 70px);
    overflow: hidden;
  }

  .sidebar {
    width: 300px;
    background: linear-gradient(to bottom, #3b1a6b, #4e268b);
    color: white;
    transition: width 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    position: relative;
    box-shadow: 4px 0 16px rgba(0, 0, 0, 0.2);
    z-index: 1500;
  }

  .sidebar.collapsed {
    width: 70px;
  }

  .sidebar ul {
    flex-grow: 1;
    overflow-y: auto;
    padding: 0;
    margin: 0;
    list-style: none;
    scrollbar-width: thin;
    scrollbar-color: #6b3fa0 #3b1a6b;
  }

  .sidebar ul::-webkit-scrollbar {
    width: 8px;
  }

  .sidebar ul::-webkit-scrollbar-track {
    background: #3b1a6b;
  }

  .sidebar ul::-webkit-scrollbar-thumb {
    background: #6b3fa0;
    border-radius: 4px;
  }

  .sidebar ul li {
    padding: 18px 16px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid #6b3fa0;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background 0.2s ease, transform 0.2s ease;
  }

  .sidebar ul li:first-child {
    border-top: 2px solid #6b3fa0;
  }

  .sidebar ul li:hover {
    background: #5a3096;
    transform: translateX(4px);
  }

  .item-left {
    display: flex;
    align-items: center;
    gap: 14px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .sidebar.collapsed .item-left {
    justify-content: center;
    gap: 0;
  }

  .label {
    color: #f0f0f0;
    transition: opacity 0.2s ease;
    font-weight: 500;
  }

  .sidebar.collapsed .label,
  .sidebar.collapsed i.fa-chevron-right {
    display: none;
  }

  .toggle-btn {
    position: absolute;
    top: 48%;
    right: -20px;
    transform: translateY(-50%);
    background: linear-gradient(to right, #3b1a6b, #4e268b);
    border: 3px solid #6b3fa0;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    font-size: 24px;
    color: #ffd700;
    cursor: pointer;
    z-index: 1001;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    transition: background 0.2s ease, transform 0.2s ease;
  }

  .toggle-btn:hover {
    background: linear-gradient(to right, #4e268b, #5a3096);
    transform: translateY(-50%) rotate(360deg);
  }

  .map-container {
    flex-grow: 1;
    position: relative;
    height: 100%;
    background: rgba(255, 255, 255, 0.05);
  }

  #map {
    position: fixed;
    top: 70px;
    left: 300px;
    width: calc(100% - 300px);
    height: calc(100vh - 70px);
    z-index: 0;
    background-color: #fff;
    transition: left 0.3s ease, width 0.3s ease;
  }

  .sidebar.collapsed ~ .map-container #map {
    left: 70px;
    width: calc(100% - 70px);
  }

  .sidebar.collapsed ~ .map-container img {
    left: 70px !important;
    width: calc(100% - 70px) !important;
  }

  .menu-item.dropdown {
    position: relative;
  }

  .menu-item .submenu {
    display: none;
    position: absolute;
    top: 0;
    left: 100%;
    min-width: 240px;
    background: #3a1768;
    border-radius: 8px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);
    z-index: 999;
    padding: 8px 0;
    transition: opacity 0.2s ease, transform 0.2s ease;
    transform: translateX(-10px);
    opacity: 0;
  }

  .menu-item:hover .submenu {
    display: block;
    transform: translateX(0);
    opacity: 1;
  }

  .submenu li {
    padding: 14px 20px;
    border-bottom: 1px solid #6b3fa0;
    transition: background 0.2s ease;
  }

  .submenu li:last-child {
    border-bottom: none;
  }

  .submenu li a {
    color: #f0f0f0;
    text-decoration: none;
    display: block;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .submenu li a:hover {
    background: #5a3096;
    border-radius: 4px;
    color: #ffffff;
  }

  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    justify-content: center;
    align-items: center;
    background: rgba(0, 0, 0, 0.6);
    z-index: 10000;
    backdrop-filter: blur(3px);
    transition: opacity 0.3s ease;
  }

  .popup {
    background: #ffffff;
    padding: 32px;
    width: 1000px;
    max-height: 80vh;
    overflow-y: auto;
    border-radius: 16px;
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.25);
    font-family: 'Poppins', sans-serif;
    transform: translateY(20px);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease;
    position: relative;
    margin: 0 auto;
    margin-left: calc(50% - 500px); /* Center popup in map container */
  }

  .sidebar.collapsed ~ .map-container .popup {
    margin-left: calc(50% - 500px + 115px); /* Adjust for collapsed sidebar */
  }

  .popup-overlay[style*="display: flex"] .popup {
    transform: translateY(0);
    opacity: 1;
  }

  .popup h3 {
    margin-bottom: 20px;
    color: #3b1a6b;
    font-size: 22px;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .popup table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    font-size: 14px;
    background: #ffffff;
    border-radius: 8px;
    overflow: hidden;
  }

  .popup th,
  .popup td {
    padding: 12px 16px;
    border: 1px solid #e0e0e0;
    text-align: left;
    transition: background 0.2s ease;
  }

  .popup th {
    background: #ede7f6;
    color: #3b1a6b;
    font-weight: 700;
    text-transform: uppercase;
    font-size: 12px;
    letter-spacing: 0.5px;
  }

  .popup tr:nth-child(even) {
    background: #f8fafc;
  }

  .popup tr:hover {
    background: #f0f4ff;
  }

  .popup .actions {
    display: flex;
    gap: 10px;
    justify-content: center;
  }

  .popup button {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    color: white;
    font-weight: 600;
    font-size: 14px;
    transition: background 0.2s ease, transform 0.2s ease;
  }

  .popup button:hover {
    transform: translateY(-2px);
  }

  .popup .edit-btn {
    background: #2ecc71;
  }

  .popup .edit-btn:hover {
    background: #27ae60;
  }

  .popup .delete-btn {
    background: #e74c3c;
  }

  .popup .delete-btn:hover {
    background: #c0392b;
  }

  .popup .close-btn {
    margin-top: 16px;
    background: #3b1a6b;
    padding: 8px 20px;
    font-size: 14px;
    width: 100%;
    border-radius: 6px;
  }

  .popup .close-btn:hover {
    background: #2e155a;
  }

  .flyout-menu {
    display: none;
    flex-direction: column;
    position: absolute;
    background: linear-gradient(to bottom, #3b1a6b, #4e268b);
    border: 1px solid #b39ddb;
    min-width: 220px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    z-index: 9999;
    max-height: 90vh;
    overflow-y: auto;
    border-radius: 8px;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .flyout-item {
    padding: 14px 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    color: #f0f0f0;
    font-weight: 500;
    border-bottom: 1px solid #6b3fa0;
    cursor: pointer;
    transition: background 0.2s ease;
    justify-content: space-between;
  }

  .flyout-item:hover {
    background: #5a3096;
  }

  .disabled-item {
    pointer-events: none;
    background: #4e268b !important;
    color: #85739b !important;
    opacity: 1;
  }

  .disabled-item .label,
  .disabled-item i {
    color: #85739b !important;
  }

  .project-background {
    position: fixed;
    top: 70px;
    left: 300px;
    width: calc(100% - 300px);
    height: calc(100vh - 70px);
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    z-index: 0;
    transition: left 0.3s ease, width 0.3s ease;
    filter: brightness(0.95);
  }

  .sidebar.collapsed ~ .map-container .project-background {
    left: 70px !important;
    width: calc(100% - 70px) !important;
  }

  /* New styles for submenu flyout */
  .flyout-submenu {
    display: none;
    flex-direction: column;
    position: absolute;
    background: linear-gradient(to bottom, #3b1a6b, #4e268b);
    border: 1px solid #b39ddb;
    min-width: 220px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    z-index: 10000;
    max-height: 90vh;
    overflow-y: auto;
    border-radius: 8px;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .flyout-submenu-item {
    padding: 14px 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    color: #f0f0f0;
    font-weight: 500;
    border-bottom: 1px solid #6b3fa0;
    cursor: pointer;
    transition: background 0.2s ease;
  }

  .flyout-submenu-item:hover {
    background: #5a3096;
  }
</style>
</head>
<body>
  <nav class="navbar shadow-sm">
    <div class="navbar-brand">
      {% if department.dept_logo %}
      <img src="{{ department.dept_logo.url }}" alt="Logo" />
      {% endif %}
      <div class="navbar-title">{{ department.dept_full_name }}</div>
    </div>
    <div class="user-info">
      <span>{{ user_name|default:"Guest" }}</span>
      <i class="fas fa-user-circle fa-2x"></i>
    </div>
  </nav>

  <div class="layout">
    <div class="sidebar" id="sidebar">
      <button class="toggle-btn" id="toggleBtn" onclick="toggleSidebar(this)"><</button>
      <ul>
        <li class="flyout-trigger" data-flyout="project">
          <div class="item-left">
            <i class="fas fa-folder"></i>
            <span class="label">Projects</span>
          </div>
          <i class="fas fa-chevron-right"></i>
        </li>
        <div id="locked-sidebar">
          <li class="disabled-item"><div class="item-left"><i class="fas fa-pen"></i><span class="label">District</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item flyout-trigger" data-flyout="tender">
            <div class="item-left"><i class="fas fa-users"></i><span class="label">Package Document</span></div>
            <i class="fas fa-chevron-right"></i>
          </li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-file"></i><span class="label">GIS & Land</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-map"></i><span class="label">Views</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-warehouse"></i><span class="label">Assets</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item flyout-trigger" data-flyout="clearance">
            <div class="item-left"><i class="fas fa-shield-alt"></i><span class="label">Clearance</span></div>
            <i class="fas fa-chevron-right"></i>
          </li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-chart-line"></i><span class="label">Progress</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-credit-card"></i><span class="label">Billing</span></div><i class="fas fa-chevron-right"></i></li>
          <li class="disabled-item"><div class="item-left"><i class="fas fa-tools"></i><span class="label">Maintenance</span></div><i class="fas fa-chevron-right"></i></li>
        </div>
      </ul>
    </div>
  </div>

  <div class="map-container" style="position: relative;">
    {% if current_project.project_image %}
      <div id="project-image" class="project-background"
        style="background-image: url('{{ current_project.project_image.url }}');">
      </div>
    {% else %}
      <div id="map"></div>
    {% endif %}
    <div id="popup-overlay" class="popup-overlay">
      <div class="popup">
        <h3><i class="fas fa-file-alt" style="margin-right: 8px; color: #3b1a6b;"></i>Clearance Details</h3>
        <table>
          <thead>
            <tr>
              <th>Sr No</th>
              <th>Clearance Name</th>
              <th>Document</th>
              <th>Inserted On</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td>Environment NOC</td>
              <td>env_noc.pdf</td>
              <td>2025-06-16</td>
              <td class="actions">
                <button class="edit-btn">Edit</button>
                <button class="delete-btn">Delete</button>
              </td>
            </tr>
          </tbody>
        </table>
        <button class="close-btn">Close</button>
      </div>
    </div>
  </div>

  <div id="flyout-project" class="flyout-menu">
    {% for project in projects %}
      <div class="flyout-item submenu-trigger" data-submenu="submenu-{{ project.project_id }}">
        <div class="item-left">
          <i class="fas fa-folder-open"></i> {{ project.project_name }}
        </div>
        <i class="fas fa-chevron-right"></i>
      </div>
      <div id="submenu-{{ project.project_id }}" class="flyout-submenu">
        {% for submenu in project.submenus %}
          <div class="flyout-submenu-item">
            <i class="fas fa-file-alt"></i> {{ submenu }}
          </div>
        {% endfor %}
      </div>
    {% endfor %}
  </div>
  <div id="flyout-tender" class="flyout-menu"></div>
  <div id="flyout-clearance" class="flyout-menu"></div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  // 🗺️ Initialize map if available
  if (document.getElementById('map')) {
    const map = L.map('map', {
      center: [22.5937, 78.9629],
      zoom: 5,
      dragging: false,
      touchZoom: false,
      scrollWheelZoom: false,
      doubleClickZoom: false,
      boxZoom: false,
      keyboard: false,
      zoomControl: false,
      attributionControl: false,
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    window.addEventListener('load', () => {
      setTimeout(() => {
        map.invalidateSize();
        map.setView([22.5937, 78.9629], 4.5); // Ensure proper layout on load
      }, 400);
    });

    window.map = map;
  }

  function updateImagePosition() {
    const sidebar = document.getElementById("sidebar");
    const image = document.getElementById("project-image");
    const mapDiv = document.getElementById("map");  // ✅ get map element

    const isCollapsed = sidebar.classList.contains("collapsed");

    // 🖼️ Update project image (if present)
    if (image) {
      image.style.left = isCollapsed ? "70px" : "300px";
      image.style.width = isCollapsed ? "calc(100% - 70px)" : "calc(100% - 300px)";
    }

    // 🗺️ Update map div (if present)
    if (mapDiv) {
      mapDiv.style.left = isCollapsed ? "70px" : "300px";
      mapDiv.style.width = isCollapsed ? "calc(100% - 70px)" : "calc(100% - 300px)";
    }
  }

  // Sidebar toggle
  function toggleSidebar(btn) {
    const sidebar = document.getElementById("sidebar");
    sidebar.classList.toggle("collapsed");
    btn.innerHTML = sidebar.classList.contains("collapsed") ? ">" : "<";

    updateImagePosition(); // applies same positioning logic to image

    setTimeout(() => {
      if (window.map) {
        map.invalidateSize();     // let Leaflet recalculate container size
        map._onResize?.();        // optional but helps in some edge cases
      }
    }, 400); // after CSS transition ends

    if (document.getElementById('popup-overlay').style.display === 'flex') {
      centerPopup();
    }

    setTimeout(updatePopupPosition, 300);
  }

  const flyoutTender = document.getElementById('flyout-tender');
  const flyoutClearance = document.getElementById('flyout-clearance');
  const flyoutProject = document.getElementById('flyout-project');

  function getFlyoutContent(type) {
    if (type === 'tender' || type === 'clearance') {
      return `
        <div class="flyout-item"><i class="fas fa-folder"></i> Package A</div>
        <div class="flyout-item"><i class="fas fa-folder"></i> Package B</div>
        <div class="flyout-item"><i class="fas fa-folder"></i> Package C</div>
      `;
    }
    return '';
  }

  function toggleFlyout(triggerElem, flyoutElem, otherFlyouts) {
    const rect = triggerElem.getBoundingClientRect();
    const sidebarCollapsed = document.getElementById('sidebar').classList.contains('collapsed');
    const offsetLeft = sidebarCollapsed ? 70 : 300;
    const type = triggerElem.dataset.flyout;

    if (type === 'tender' || type === 'clearance') {
      flyoutElem.innerHTML = getFlyoutContent(type);

      setTimeout(() => {
        const items = flyoutElem.querySelectorAll('.flyout-item');
        items.forEach(item => {
          item.addEventListener('click', e => {
            e.stopPropagation();
            showPopup();
          });
        });
      }, 0);
    }

    flyoutElem.style.left = `${offsetLeft}px`;
    flyoutElem.style.top = `${rect.top}px`;

    const isVisible = flyoutElem.style.display === 'flex';
    flyoutElem.style.display = isVisible ? 'none' : 'flex';

    otherFlyouts.forEach(f => {
      if (f !== flyoutElem) f.style.display = 'none';
    });

    // Hide all submenu flyouts when toggling main flyout
    document.querySelectorAll('.flyout-submenu').forEach(submenu => {
      submenu.style.display = 'none';
    });
  }

  function toggleSubmenu(triggerElem, submenuId) {
    const submenu = document.getElementById(submenuId);
    const rect = triggerElem.getBoundingClientRect();
    const flyoutProject = document.getElementById('flyout-project');
    const flyoutRect = flyoutProject.getBoundingClientRect();

    submenu.style.left = `${flyoutRect.right}px`;
    submenu.style.top = `${rect.top}px`;

    const isVisible = submenu.style.display === 'flex';
    submenu.style.display = isVisible ? 'none' : 'flex';

    // Hide other submenus
    document.querySelectorAll('.flyout-submenu').forEach(otherSubmenu => {
      if (otherSubmenu !== submenu) otherSubmenu.style.display = 'none';
    });
  }

  document.querySelectorAll('.flyout-trigger').forEach(trigger => {
    const flyoutType = trigger.dataset.flyout;
    const chevron = trigger.querySelector('i.fa-chevron-right');
    chevron.addEventListener('click', e => {
      e.stopPropagation();
      if (flyoutType === 'tender') {
        toggleFlyout(trigger, flyoutTender, [flyoutClearance, flyoutProject]);
      } else if (flyoutType === 'clearance') {
        toggleFlyout(trigger, flyoutClearance, [flyoutTender, flyoutProject]);
      } else if (flyoutType === 'project') {
        toggleFlyout(trigger, flyoutProject, [flyoutTender, flyoutClearance]);
      }
    });
  });

  // Handle submenu triggers
  document.querySelectorAll('.submenu-trigger').forEach(trigger => {
    const chevron = trigger.querySelector('i.fa-chevron-right');
    chevron.addEventListener('click', e => {
      e.stopPropagation();
      const submenuId = trigger.dataset.submenu;
      toggleSubmenu(trigger, submenuId);
    });

    // Preserve project selection on clicking the project name
    trigger.querySelector('.item-left').addEventListener('click', e => {
      e.stopPropagation();
      const url = trigger.getAttribute('onclick').match(/'([^']+)'/)[1];
      selectProject(url);
    });
  });

  // Hide flyouts and submenus on outside click
  document.body.addEventListener('click', e => {
    if (
      !e.target.closest('.flyout-menu') &&
      !e.target.closest('.flyout-trigger') &&
      !e.target.closest('.flyout-submenu') &&
      !e.target.closest('.submenu-trigger')
    ) {
      flyoutTender.style.display = 'none';
      flyoutClearance.style.display = 'none';
      flyoutProject.style.display = 'none';
      document.querySelectorAll('.flyout-submenu').forEach(submenu => {
        submenu.style.display = 'none';
      });
    }
  });

  // Show popup
  function showPopup() {
    const overlay = document.getElementById('popup-overlay');
    overlay.style.display = 'flex';
    overlay.style.opacity = 0;
    requestAnimationFrame(() => {
      overlay.style.transition = 'opacity 0.2s ease';
      overlay.style.opacity = 1;
    });
    updatePopupPosition();
    centerPopup();
  }

  // Close popup
  document.querySelector('.close-btn')?.addEventListener('click', () => {
    const overlay = document.getElementById('popup-overlay');
    overlay.style.opacity = 0;
    setTimeout(() => {
      overlay.style.display = 'none';
    }, 200);
  });

  // Update popup layout when sidebar changes
  function updatePopupPosition() {
    const overlay = document.getElementById('popup-overlay');
    const sidebar = document.getElementById('sidebar');
    const collapsed = sidebar.classList.contains('collapsed');
    document.documentElement.style.setProperty('--sidebar-width', collapsed ? '70px' : '300px');
  }

  // Project selection
  function selectProject(url) {
    const items = document.querySelectorAll('#locked-sidebar .disabled-item');
    items.forEach(item => {
      item.classList.remove('disabled-item');
    });
    document.getElementById('locked-sidebar')?.removeAttribute('id');
    setTimeout(() => {
      window.location.href = url;
    }, 150);
  }

  // Center popup
  function centerPopup() {
    const popup = document.querySelector('.popup');
    const sidebar = document.getElementById('sidebar');
    const collapsed = sidebar.classList.contains('collapsed');
    popup.style.marginLeft = collapsed ? 'calc(50% - 500px + 115px)' : 'calc(50% - 500px)';
  }

  {% if project_selected %}
    window.addEventListener('DOMContentLoaded', () => {
      const items = document.querySelectorAll('#locked-sidebar .disabled-item');
      items.forEach(item => {
        item.classList.remove('disabled-item');
      });
      document.getElementById('locked-sidebar')?.removeAttribute('id');
      updateImagePosition(); // ✅ call on page load if project is selected
    });
  {% else %}
    window.addEventListener('DOMContentLoaded', () => {
      updateImagePosition(); // ✅ call even if project is not selected
    });
  {% endif %}
</script>
</body>
</html>



from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.contrib.auth.hashers import check_password
from .models import Department, User_header_all, Project
import logging
from django.http import HttpResponse

logger = logging.getLogger(__name__)

def login(request, dept_name):
    department = get_object_or_404(Department, dept_name=dept_name)
    
    if request.method == 'POST':
        username = request.POST.get('u_user_id')
        password = request.POST.get('u_password')
        
        if not username or not password:
            return render(request, 'login.html', {
                'department': department,
                'error': 'Username and password are required'
            })

        try:
            # Fetch the user with the given username, line_no=0, and status=1
            base_user = User_header_all.objects.filter(username=username, line_no=0, status=1).first()
            if not base_user:
                logger.debug(f"User not found or inactive: {username}")
                return render(request, 'login.html', {
                    'department': department,
                    'error': 'Invalid username or password'
                })

            # Check if the user's department matches the URL dept_name
            if base_user.department and base_user.department.dept_name != dept_name:
                logger.debug(f"User {username} attempted login from incorrect department URL: {dept_name}")
                return render(request, 'login.html', {
                    'department': department,
                    'error': f"You can only log in from http://127.0.0.1:8000/login/{base_user.department.dept_name}"
                })

            # Verify the password
            if check_password(password, base_user.password):
                # Set basic session variables
                request.session['user_id'] = base_user.user_id
                request.session['user_name'] = base_user.full_name
                request.session['user_designation'] = ''

                # Redirect to dashboard on successful login
                logger.debug(f"Login successful for {username}, redirecting to dashboard")
                return redirect('dashboard', dept_name=dept_name)
            else:
                logger.debug(f"Password mismatch for {username}")
                return render(request, 'login.html', {
                    'department': department,
                    'error': 'Invalid username or password'
                })
        except Exception as e:
            logger.debug(f"Error during login for {username}: {str(e)}")
            return render(request, 'login.html', {
                'department': department,
                'error': 'Invalid username or password'
            })
    
    return render(request, 'login.html', {'department': department})

def dashboard(request, dept_name):
    department = get_object_or_404(Department, dept_name=dept_name)

    # Check if user is logged in
    user_id = request.session.get('user_id')
    if not user_id:
        return redirect('login', dept_name=dept_name)

    try:
        user = User_header_all.objects.get(user_id=user_id, status=1)
        if user.department.dept_name != dept_name:
            return redirect('login', dept_name=user.department.dept_name)
    except User_header_all.DoesNotExist:
        return redirect('login', dept_name=dept_name)

    # Fetch projects belonging to the user's department
    projects = Project.objects.filter(department=department).order_by('project_name')

    return render(request, 'dashboard.html', {
        'department': department,
        'user_name': request.session.get('user_name', 'Guest'),
        'projects': projects  # Pass projects to the template
    })
    
def project_detail(request, dept_name, project_id):
    department = get_object_or_404(Department, dept_name=dept_name)
    current_project = get_object_or_404(Project, project_id=project_id, department=department)
    
    projects = Project.objects.filter(department=department)
    
    context = {
        'department': department,
        'current_project': current_project,
        'projects': projects,
        'user_name': request.session.get('user_name'),
        'project_selected': True,
    }
    return render(request, 'dashboard.html', context)









from django.db import models
from django.urls import reverse
from django.utils import timezone
from django.core.validators import RegexValidator
from django.contrib.auth.hashers import make_password
import re
from django.contrib.postgres.fields import ArrayField

class UniqueIdHeaderAll(models.Model):
    table_name = models.CharField(max_length=100)
    id_for = models.CharField(max_length=50)
    prefix = models.CharField(max_length=3)  # E.g., UHA, DEP
    last_id = models.CharField(max_length=15)  # E.g., UHA-00001
    created_on = models.DateTimeField()
    modified_on = models.DateTimeField()

    def save(self, *args, **kwargs):
        if not self.created_on:
            self.created_on = timezone.now()
        self.modified_on = timezone.now()
        super().save(*args, **kwargs)

    def get_next_id(self):
        if not self.last_id:
            # Initialize with the first ID, e.g., UHA-00001
            next_id = f"{self.prefix}-00001"
            self.last_id = next_id
            self.save()
            return next_id

        # Parse the last_id, e.g., UHA-ZA001 -> prefix: UHA, alphabets: ZA, digits: 001
        last_id_parts = self.last_id.split('-')
        if len(last_id_parts) != 2:
            raise ValueError(f"Invalid last_id format: {self.last_id}")

        prefix, rest = last_id_parts
        alphabets = ''.join(re.findall(r'[A-Z]', rest))
        digits = ''.join(re.findall(r'\d+', rest))

        # Total length of alphabets + digits must be 5
        alpha_len = len(alphabets)
        digit_len = 5 - alpha_len  # Number of digits decreases as alphabets increase

        if alpha_len == 5:
            raise ValueError("Reached the maximum ID limit: ZZZZZ")

        # Check if we need to increment the alphabetic part
        if digits == '9' * digit_len:  # e.g., 9999, 999, 99, 9
            if alphabets == 'Z' and alpha_len == 1:
                alphabets = 'ZA'  # Z -> ZA
                digits = '001'    # 3 digits (ZA001)
            elif alphabets == 'ZZ' and alpha_len == 2:
                alphabets = 'ZZA'  # ZZ -> ZZA
                digits = '01'      # 2 digits (ZZA01)
            elif alphabets == 'ZZZ' and alpha_len == 3:
                alphabets = 'ZZZZ'  # ZZZ -> ZZZZ
                digits = '1'        # 1 digit (ZZZZ1)
            elif alphabets == 'ZZZZ' and alpha_len == 4:
                alphabets = 'ZZZZZ'  # ZZZZ -> ZZZZZ
                digits = ''          # 0 digits (ZZZZZ)
            elif alpha_len == 0:
                alphabets = 'A'      # 9999 -> A0001
                digits = '0001'      # 4 digits (A0001)
            elif alpha_len in [1, 2, 3] and alphabets[-1] != 'Z':
                # A -> B, ZA -> ZB, ZZA -> ZZB
                last_char = alphabets[-1]
                alphabets = alphabets[:-1] + chr(ord(last_char) + 1)
                digits = '1'.zfill(digit_len)  # Reset digits (e.g., 0001, 001, 01)
            elif alpha_len in [2, 3] and alphabets[-1] == 'Z':
                # ZA -> ZZA, ZZA -> ZZZA
                alphabets += 'A'
                digits = '1'.zfill(digit_len - 1)  # One less digit (e.g., 001, 01)
        else:
            # Increment the numeric part
            next_number = int(digits) + 1
            digits = str(next_number).zfill(digit_len)

        # Construct the next ID
        next_id = f"{self.prefix}-{alphabets}{digits}"
        self.last_id = next_id
        self.save()
        return next_id

    def __str__(self):
        return f"{self.table_name}"

class Profile_header_all(models.Model):
    STATUS_CHOICES = (
        (1, 'Active'),
        (0, 'Deactive'),
    )

    profile_id = models.CharField(max_length=20, unique=True, blank=True)
    profile_name = models.CharField(max_length=100)
    pro_form_ids = ArrayField(models.CharField(max_length=100), blank=True, null=True, default=list)
    pro_process_ids = ArrayField(models.CharField(max_length=100), blank=True, null=True, default=list)
    inserted_on = models.DateTimeField(auto_now_add=True)
    deactivated_on = models.DateTimeField(blank=True, null=True, default=None)
    profile_status = models.IntegerField(choices=STATUS_CHOICES, default=1)

    def __str__(self):
        return f"{self.profile_id} - {self.profile_name}"

    def save(self, *args, **kwargs):
        if not self.profile_id:
            unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
                table_name='profile_header_all',
                id_for='profile_id',
                defaults={
                    'prefix': 'PFL',
                    'last_id': '',
                    'created_on': timezone.now(),
                    'modified_on': timezone.now()
                }
            )
            self.profile_id = unique_id.get_next_id()
        super().save(*args, **kwargs)

    @classmethod
    def get_or_assign_profile_id(cls, profile_name):
        existing_profile = cls.objects.filter(profile_name=profile_name).first()
        if existing_profile:
            return existing_profile.profile_id
        unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
            table_name='profile_header_all',
            id_for='profile_id',
            defaults={
                'prefix': 'PFL',
                'last_id': '',
                'created_on': timezone.now(),
                'modified_on': timezone.now()
            }
        )
        return unique_id.get_next_id()

class Department(models.Model):
    dept_id = models.CharField(max_length=20, unique=True, blank=True)
    dept_name = models.CharField(max_length=100, unique=True)
    dept_full_name = models.CharField(max_length=100, unique=True)
    dept_logo = models.ImageField(upload_to='department_logos/', null=True, blank=True)
    dept_no_of_projects = models.PositiveIntegerField(default=0)
    dept_reg_contractors = models.PositiveIntegerField(default=0)
    dept_status = models.IntegerField(choices=[(0, 'Suspend'), (1, 'Active')], default=1)
    dept_admins_users = models.PositiveIntegerField(default=0)
    link = models.URLField(max_length=200, blank=True)
    dept_login_bg = models.ImageField(upload_to='department_backgrounds/login/', null=True, blank=True)
    dept_dashboard_bg = models.ImageField(upload_to='department_backgrounds/dashboard/', null=True, blank=True)

    def __str__(self):
        return f"{self.dept_id} - {self.dept_name}"

    def save(self, *args, **kwargs):
        if not self.dept_id:
            unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
                table_name='department',
                id_for='dept_id',
                defaults={
                    'prefix': 'DEP',
                    'last_id': '',
                    'created_on': timezone.now(),
                    'modified_on': timezone.now()
                }
            )
            self.dept_id = unique_id.get_next_id()

        if not self.link:
            base_url = "http://127.0.0.1:8000"
            path = reverse('login', args=[self.dept_name])
            self.link = f"{base_url}{path}"

        super().save(*args, **kwargs)

    @classmethod
    def get_or_assign_dept_id(cls, dept_name):
        existing_dept = cls.objects.filter(dept_name=dept_name).first()
        if existing_dept:
            return existing_dept.dept_id
        unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
            table_name='department',
            id_for='dept_id',
            defaults={
                'prefix': 'DEP',
                'last_id': '',
                'created_on': timezone.now(),
                'modified_on': timezone.now()
            }
        )
        return unique_id.get_next_id()

class User_header_all(models.Model):
    mobile_validator = RegexValidator(
        regex=r'^[6-9]\d{9}$',
        message='Mobile number must be 10 digits and start with 6, 7, 8, or 9.'
    )
    STATUS_CHOICES = (
        (1, 'Active'),
        (0, 'Deactive'),
    )
    USER_TYPE_CHOICES = (
        (1, 'Platform owner'),
        (2, 'Department'),
        (3, 'Contractor'),
    )

    user_id = models.CharField(max_length=15, blank=True)
    full_name = models.CharField(max_length=150)
    email = models.EmailField(max_length=150, blank=True)
    username = models.CharField(max_length=150)
    password = models.CharField(max_length=128)
    mobile_no = models.CharField(max_length=10, blank=True, validators=[mobile_validator])
    line_no = models.IntegerField(default=0)
    profile_id = models.ForeignKey(
        'Profile_header_all',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        to_field='profile_id',
        related_name='user_assignments'
    )
    department = models.ForeignKey(
        'Department',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        to_field='dept_id',
        related_name='users'
    )
    project_id = models.JSONField(default=dict, null=True, blank=True)
    user_type = models.IntegerField(choices=USER_TYPE_CHOICES, blank=True, null=True)
    status = models.IntegerField(choices=STATUS_CHOICES, default=1)
    inserted_on = models.DateTimeField(auto_now_add=True)
    deactivated_on = models.DateTimeField(blank=True, null=True, default=None)

    class Meta:
        unique_together = ('user_id', 'line_no')

    def __str__(self):
        return f"{self.user_id} - {self.username} (Line {self.line_no})"

    def save(self, *args, **kwargs):
        if not self.user_id:
            self.user_id = self.get_or_assign_user_id(self.username)
        
        if self.password and not self.password.startswith('pbkdf2_'):
            self.password = make_password(self.password)
        
        super().save(*args, **kwargs)

    @classmethod
    def get_or_assign_user_id(cls, username):
        existing_user = cls.objects.filter(username=username, line_no=0).first()
        if existing_user:
            return existing_user.user_id

        unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
            table_name='user_header_all',
            id_for='user_id',
            defaults={
                'prefix': 'UHA',
                'last_id': '',
                'created_on': timezone.now(),
                'modified_on': timezone.now()
            }
        )
        return unique_id.get_next_id()
    
    
class Project(models.Model):
    YES_NO_CHOICES = [('Yes', 'Yes'), ('No', 'No')]

    project_id = models.CharField(max_length=20, unique=True, blank=True)
    project_name = models.CharField(max_length=100)
    project_description = models.TextField(blank=True)
    project_details_KM = models.CharField(max_length=100)
    
    SUSPEND = 0
    ACTIVE = 1
    STATUS_CHOICES = [(SUSPEND, 'Suspend'), (ACTIVE, 'Active')]
    project_status = models.IntegerField(choices=STATUS_CHOICES, default=ACTIVE)
    
    project_type = models.CharField(max_length=100)
    project_admin_name = models.CharField(max_length=100)
    project_reg_contractors = models.PositiveIntegerField(default=0)
    project_admin_users = models.PositiveIntegerField(default=0)
    
    from_KM = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    to_KM = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    department = models.ForeignKey(Department, on_delete=models.CASCADE, null=True, blank=True, related_name='projects')

    step_statuses = models.JSONField(default=dict, blank=True)
    
    survey_properties = models.CharField(max_length=3, choices=YES_NO_CHOICES, default='Yes')
    field_survey = models.CharField(max_length=3, choices=YES_NO_CHOICES, default='No')
    plot = models.CharField(max_length=3, choices=YES_NO_CHOICES, default='Yes')
    land = models.CharField(max_length=3, choices=YES_NO_CHOICES, default='Yes')
    
    project_image = models.ImageField(upload_to='project_images/', null=True, blank=True)
    
    submenus = ArrayField(models.CharField(max_length=100), blank=True, null=True, default=list)

    def __str__(self):
        return f"{self.project_id} - {self.project_name}"

    def save(self, *args, **kwargs):
        if not self.project_id:
            unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
                table_name='project',
                id_for='project_id',
                defaults={
                    'prefix': 'PRO',
                    'last_id': '',
                    'created_on': timezone.now(),
                    'modified_on': timezone.now()
                }
            )
            self.project_id = unique_id.get_next_id()

        super().save(*args, **kwargs)

    @classmethod
    def get_or_assign_project_id(cls, project_name):
        existing_project = cls.objects.filter(project_name=project_name).first()
        if existing_project:
            return existing_project.project_id
        unique_id, _ = UniqueIdHeaderAll.objects.get_or_create(
            table_name='project',
            id_for='project_id',
            defaults={
                'prefix': 'PRO',
                'last_id': '',
                'created_on': timezone.now(),
                'modified_on': timezone.now()
            }
        )
        return unique_id.get_next_id()